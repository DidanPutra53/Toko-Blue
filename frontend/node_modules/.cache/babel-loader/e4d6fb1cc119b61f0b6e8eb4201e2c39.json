{"ast":null,"code":"import { authConstants, userConstants } from \"../constants/userConstant\";\nimport axios from 'axios'; //LOGIN \n\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: authConstants.LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/masuk', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: authConstants.LOGIN_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: authConstants.LOGIN_FAILURE,\n      payload: error.response.data.message\n    });\n  }\n}; //REGISTER\n\nexport const register = userData => async dispatch => {\n  try {\n    dispatch({\n      type: authConstants.USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/daftar', userData, config);\n    dispatch({\n      type: authConstants.USER_REGISTER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: authConstants.USER_REGISTER_FAILURE,\n      payload: error.response.data.message\n    });\n  }\n}; //LOAD USER\n\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: authConstants.USER_LOAD_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/profile');\n    dispatch({\n      type: authConstants.USER_LOAD_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: authConstants.USER_LOAD_FAILURE,\n      payload: error.response.data.message\n    });\n  }\n}; //UPDATE PROFILE\n\nexport const updateProfile = userData => async dispatch => {\n  try {\n    dispatch({\n      type: userConstants.UPDATE_PROFILE_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/profile/ubah-profile', userData, config);\n    dispatch({\n      type: userConstants.UPDATE_PROFILE_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: userConstants.UPDATE_PROFILE_FAILURE,\n      payload: error.response.data.message\n    });\n  }\n}; //LOGOUT USER\n\nexport const logoutUser = () => async dispatch => {\n  try {\n    await axios.get('api/v1/keluar');\n    dispatch({\n      type: authConstants.USER_LOGOUT_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: authConstants.USER_LOGOUT_FAILURE,\n      payload: error.response.data.message\n    });\n  }\n}; //UPDATE PASSWORD\n\nexport const updatePassword = passwords => async dispatch => {\n  try {\n    dispatch({\n      type: userConstants.UPDATE_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/password/ubah-password', passwords, config);\n    dispatch({\n      type: userConstants.UPDATE_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: userConstants.UPDATE_PASSWORD_FAILURE,\n      payload: error.response.data.message\n    });\n  }\n}; //FORGOT PASSWORD\n\nexport const forgotPassword = email => async dispatch => {\n  try {\n    dispatch({\n      type: userConstants.FORGOT_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/password/reset-password', email, config);\n    dispatch({\n      type: userConstants.FORGOT_PASSWORD_SUCCESS,\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: userConstants.FORGOT_PASSWORD_FAILURE,\n      payload: error.response.data.message\n    });\n  }\n}; //RESET PASSWORD\n\nexport const resetPassword = (token, passwords) => async dispatch => {\n  try {\n    dispatch({\n      type: userConstants.NEW_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/password/reset-password/${token}`, passwords, config);\n    dispatch({\n      type: userConstants.NEW_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: userConstants.NEW_PASSWORD_FAILURE,\n      payload: error.response.data.message\n    });\n  }\n}; ////ADMIN ROUTES////\n\nexport const allUsers = () => async dispatch => {\n  try {\n    dispatch({\n      type: userConstants.ALL_USERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/admin/users');\n    dispatch({\n      type: userConstants.ALL_USERS_SUCCESS,\n      payload: data.users\n    });\n  } catch (error) {\n    dispatch({\n      type: userConstants.ALL_USERS_FAILURE,\n      payload: error.response.data.message\n    });\n  }\n}; // Delete user - ADMIN\n\nexport const deleteUser = id => async dispatch => {\n  try {\n    dispatch({\n      type: userConstants.DELETE_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.delete(`/api/v1/admin/users/${id}`);\n    dispatch({\n      type: userConstants.DELETE_USER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: userConstants.DELETE_USER_FAILURE,\n      payload: error.response.data.message\n    });\n  }\n}; //clear error\n\nexport const clearError = () => async dispatch => {\n  dispatch({\n    type: authConstants.CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["C:/Users/coegb/Documents/e-commerce/frontend/src/actions/userAction.js"],"names":["authConstants","userConstants","axios","login","email","password","dispatch","type","LOGIN_REQUEST","config","headers","data","post","LOGIN_SUCCESS","payload","user","error","LOGIN_FAILURE","response","message","register","userData","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAILURE","loadUser","USER_LOAD_REQUEST","get","USER_LOAD_SUCCESS","USER_LOAD_FAILURE","updateProfile","UPDATE_PROFILE_REQUEST","put","UPDATE_PROFILE_SUCCESS","success","UPDATE_PROFILE_FAILURE","logoutUser","USER_LOGOUT_SUCCESS","USER_LOGOUT_FAILURE","updatePassword","passwords","UPDATE_PASSWORD_REQUEST","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAILURE","forgotPassword","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_FAILURE","resetPassword","token","NEW_PASSWORD_REQUEST","NEW_PASSWORD_SUCCESS","NEW_PASSWORD_FAILURE","allUsers","ALL_USERS_REQUEST","ALL_USERS_SUCCESS","users","ALL_USERS_FAILURE","deleteUser","id","DELETE_USER_REQUEST","delete","DELETE_USER_SUCCESS","DELETE_USER_FAILURE","clearError","CLEAR_ERRORS"],"mappings":"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","sourcesContent":["import { authConstants, userConstants } from \"../constants/userConstant\";\r\nimport axios from 'axios'\r\n\r\n\r\n//LOGIN \r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: authConstants.LOGIN_REQUEST })\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        const { data } = await axios.post('/api/v1/masuk', { email, password }, config)\r\n        dispatch({\r\n            type: authConstants.LOGIN_SUCCESS,\r\n            payload: data.user\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: authConstants.LOGIN_FAILURE,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n//REGISTER\r\nexport const register = (userData) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: authConstants.USER_REGISTER_REQUEST })\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }\r\n        const { data } = await axios.post('/api/v1/daftar', userData, config)\r\n        dispatch({\r\n            type: authConstants.USER_REGISTER_SUCCESS,\r\n            payload: data.user\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: authConstants.USER_REGISTER_FAILURE,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n//LOAD USER\r\nexport const loadUser = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: authConstants.USER_LOAD_REQUEST })\r\n\r\n        const { data } = await axios.get('/api/v1/profile')\r\n        dispatch({\r\n            type: authConstants.USER_LOAD_SUCCESS,\r\n            payload: data.user\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: authConstants.USER_LOAD_FAILURE,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n//UPDATE PROFILE\r\nexport const updateProfile = (userData) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: userConstants.UPDATE_PROFILE_REQUEST })\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }\r\n        const { data } = await axios.put('/api/v1/profile/ubah-profile', userData, config)\r\n        dispatch({\r\n            type: userConstants.UPDATE_PROFILE_SUCCESS,\r\n            payload: data.success\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: userConstants.UPDATE_PROFILE_FAILURE,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n//LOGOUT USER\r\nexport const logoutUser = () => async (dispatch) => {\r\n    try {\r\n        await axios.get('api/v1/keluar')\r\n        dispatch({\r\n            type: authConstants.USER_LOGOUT_SUCCESS,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: authConstants.USER_LOGOUT_FAILURE,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n//UPDATE PASSWORD\r\nexport const updatePassword = (passwords) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: userConstants.UPDATE_PASSWORD_REQUEST })\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        const { data } = await axios.put('/api/v1/password/ubah-password', passwords, config)\r\n        dispatch({\r\n            type: userConstants.UPDATE_PASSWORD_SUCCESS,\r\n            payload: data.success\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: userConstants.UPDATE_PASSWORD_FAILURE,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n//FORGOT PASSWORD\r\nexport const forgotPassword = (email) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: userConstants.FORGOT_PASSWORD_REQUEST })\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        const { data } = await axios.post('/api/v1/password/reset-password', email, config)\r\n        dispatch({\r\n            type: userConstants.FORGOT_PASSWORD_SUCCESS,\r\n            payload: data.message\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: userConstants.FORGOT_PASSWORD_FAILURE,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n//RESET PASSWORD\r\nexport const resetPassword = (token, passwords) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: userConstants.NEW_PASSWORD_REQUEST })\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        const { data } = await axios.put(`/api/v1/password/reset-password/${token}`, passwords, config)\r\n        dispatch({\r\n            type: userConstants.NEW_PASSWORD_SUCCESS,\r\n            payload: data.success\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: userConstants.NEW_PASSWORD_FAILURE,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n////ADMIN ROUTES////\r\nexport const allUsers = () => async (dispatch) => {\r\n    try {\r\n\r\n        dispatch({ type: userConstants.ALL_USERS_REQUEST })\r\n\r\n        const { data } = await axios.get('/api/v1/admin/users')\r\n\r\n        dispatch({\r\n            type: userConstants.ALL_USERS_SUCCESS,\r\n            payload: data.users\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: userConstants.ALL_USERS_FAILURE,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// Delete user - ADMIN\r\nexport const deleteUser = (id) => async (dispatch) => {\r\n    try {\r\n\r\n        dispatch({ type: userConstants.DELETE_USER_REQUEST })\r\n\r\n        const { data } = await axios.delete(`/api/v1/admin/users/${id}`)\r\n\r\n        dispatch({\r\n            type: userConstants.DELETE_USER_SUCCESS,\r\n            payload: data.success\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: userConstants.DELETE_USER_FAILURE,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n//clear error\r\nexport const clearError = () => async (dispatch) => {\r\n    dispatch({\r\n        type: authConstants.CLEAR_ERRORS\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}